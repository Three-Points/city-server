openapi: 3.1.0
info:
  version: 0.2.0
  title:  API
  license:
    name: MIT
    url: 'https://github.com/Three-Points/zentrity/blob/development/project/markdown/license.md'
  description: |
    The propuse of this project is create a little server to complete the master module named **Server Architecture** that will be a simple example of NodeJS server.

    Also, this project will consider next points:

    -   DevOps integration with CI environment (Github Actions).
    -   Rest API definition
    -   MVC architecture as clean architecture

    [![Website](https://img.shields.io/badge/Website-ECEFF4?style=for-the-badge&logo=iCloud&logoColor=2E3440)](https://zentrity.herokuapp.com/api)
externalDocs:
  description: Github project âœ¨
  url: 'https://github.com/Three-Points/zentrity'
tags:
  - name: Employee
    description: People register inside of platform.
servers:
  - url: 'http://localhost:3000/api'
    description: Development server
  - url: 'https://zentrity.herokuapp.com/api'
    description: Staging server
paths:
  /employees:
    get:
      tags:
        - Post
      summary: Gets Employees
      description: |
        Return all employees in the database or by query.
      operationId: getEmployees
      parameters:
        - name: page
          in: query
          description: Employees paginated.
          schema:
            type: number
            minimum: 1
        - name: badges
          in: query
          description: Search by Badge Color
          schema:
            type: array
            items:
              type: string
              enum:
                - blue
                - black
                - green
                - orange
        - name: name
          in: query
          description: Search by Name
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Employee'
                      example:
                        name: Sue
                        age: 19
                        phone:
                          personal: 555-123-123
                          work: 555-456-456
                          ext: "2342"
                        privileges: user
                        favorites:
                          artis: Picasso
                          food: pizza
                        finished:
                          - 17
                          - 3
                        badges:
                          - blue
                          - black
                        points:
                          - points: 85
                            bonus: 20
                          - points: 85
                            bonus: 10
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags:
        - Post
      summary: Create Employee
      description: |
        Create a new employee in the database.
      operationId: createEmployee
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  employee:
                    allOf:
                      - $ref: '#/components/schemas/Employee'
                    example:
                      name: Emmanuel
                      age: 27
                      phone:
                        personal: 555-123-123
                        work: 555-456-456
                        ext: "2342"
                      privileges: admin
                      favorites:
                        artis: Miro
                        food: tacos
                      finished:
                        - 20
                        - 4
                      badges:
                        - blue
                        - orange
                      points:
                        - points: 67
                          bonus: 10
                        - points: 36
                          bonus: 50
        '400':
          $ref: '#/components/responses/BadRequest'
  /employee:
    get:
      tags:
        - Post
      summary: Get Employee
      description: |
        Return the oldest employee in the database.
      operationId: getEmployee
      parameters:
        - name: oldest
          in: query
          description: Oldest filter.
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Employee'
                example:
                  name: Sue
                  age: 19
                  phone:
                    personal: 555-123-123
                    work: 555-456-456
                    ext: "2342"
                  privileges: user
                  favorites:
                    artis: Picasso
                    food: pizza
                  finished:
                    - 17
                    - 3
                  badges:
                    - blue
                    - black
                  points:
                    - points: 85
                      bonus: 20
                    - points: 85
                      bonus: 10
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  schemas:
    Employee:
      type: object
      properties:
        name:
          type: string
          description: Employee's name
        age:
          description: Employee's age
          type: number
        phone:
          type: object
          description: Employee's phone contact
          properties:
            personal:
              type: string
              description: Personal phone
            work:
              type: string
              description: Work phone
            ext:
              type: string
              description: Work phone extension
        privileges:
          type: string
          description: Employee's privileges
          enum:
            - admin
            - user
        favorites:
          type: object
          description: Employee's favorites things
          properties:
            artist:
              type: string
              description: Artist's name
            food:
              type: string
              description: Favorite food
            finished:
              type: array
              description: Finished numeration
              items:
                type: number
            badges:
              type: array
              description: Badges colors
              items:
                type: string
                enum:
                  - black
                  - blue
                  - orange
                  - green
            points:
              type: array
              description: Points collection
              items:
                type: object
                properties:
                  points:
                    type: number
                    description: Points
                  bonus:
                    type: number
                    description: Bonus
  responses:
    BadRequest:
      description: The specified resource was bad request
      content:
        application/json:
          schema:
            type: string
            example: Bad request